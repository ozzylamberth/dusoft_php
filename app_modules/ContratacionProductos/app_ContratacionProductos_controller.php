<?php  /**  * @package IPSOFT-SIIS  * @version $Id: app_ContratacionProductos_controller.php,v 1.14 2010/01/26 22:40:55 sandra Exp $Revision: 1.14 $  * @copyright (C) 2009 IPSOFT - SA (www.ipsoft-sa.com)  * @author Sandra Viviana Pantoja Torres   */  /**  * Clase Control: ContratacionProductos  * Clase encargada del control de llamado de metodos en el modulo  *  * @package IPSOFT-SIIS  * @version $Revision: 1.14 $request = $_REQUEST;  /*/ class  app_ContratacionProductos_controller extends classModulo{    /**    * Constructor de la clase    */    function app_ContratacionProductos_controller(){}      /**      * Funcion principal del modulo      * @return boolean      */      function Main()      {        $request = $_REQUEST;        $contratacion = AutoCarga::factory('ContratacionProductosSQL', '', 'app', 'ContratacionProductos');        $action['volver'] = ModuloGetURL('system', 'Menu');        $permisos = $contratacion->ObtenerPermisos();            $ttl_gral = "CONTRATACIÒN DE PRODUCTOS";        $titulo[0] = 'EMPRESAS';        $url[0] = 'app';        $url[1] = 'ContratacionProductos';         $url[2] = 'controller';        $url[3] = 'Menu';         $url[4] = 'contratacionproductos';         $this->salida = gui_theme_menu_acceso($ttl_gral, $titulo, $permisos, $url, $action['volver']);        return true;       }        /**        * Funcion Menu del modulo        * Funcion Menu para Todas Las Opciones Principales del Modulo        * @return boolean        */		function Menu()		{			$request = $_REQUEST;			$empresita=$request['contratacionproductos']['empresa'];			$action['seleccion_proveed'] = ModuloGetURL("app", "ContratacionProductos", "controller", "BusquedaProveedor");			$action['contratacion'] = ModuloGetURL("app", "ContratacionProductos", "controller", "BusquedaProveedor",array("empresitas"=>$request['contratacionproductos']['empresa']));			$action['asociar'] = ModuloGetURL("app", "ContratacionProductos", "controller", "ListaFarmacias");			$action['volver'] = ModuloGetURL("app", "ContratacionProductos", "controller", "Main");			if($request['contratacionproductos']) SessionSetVar("DatosEmpresaCP",$request['contratacionproductos']);			$act = AutoCarga::factory("ContratacionProductosHTML", "views", "app", "ContratacionProductos");			$this->salida = $act->FormaMenu($action);			return true;      		}      /**      * Funcion Busqueda de Proveedor       * Funcion que permite;      *    - Buscar la Informacion del Proveedor       *    - Listar Todos Los Proveedores  que Existen      * @return boolean      */		function BusquedaProveedor ()	    {			$request = $_REQUEST;			$empresitas=$request['empresitas'];			$mdl = AutoCarga::factory("ContratacionProductosSQL", "classes", "app", "ContratacionProductos");			$tipos_id_prov = $mdl->ConsultarTipoId();			$emp = SessionGetVar("DatosEmpresaCP");			$empresita=$emp['empresa'];			$act = AutoCarga::factory("ContratacionProductosHTML", "views", "app", "ContratacionProductos");			$conteo =$pagina=0;				if(!empty($request['buscador']))				{					$datos=$mdl->ObtenerProveedores($request['buscador'],$request['offset'],$empresita);	            					$action['buscador']=ModuloGetURL('app','ContratacionProductos','controller','BusquedaProveedor');					$action['paginador'] = ModuloGetURL("app", "ContratacionProductos", "controller", "BusquedaProveedor",array("buscador"=>$request['buscador']));					$action['nuevo'] = ModuloGetURL("app", "ContratacionProductos", "controller", "MenuPrincipal");					$conteo= $mdl->conteo;					$pagina= $mdl-> pagina;				}	        $action['volver'] = ModuloGetURL("app", "ContratacionProductos", "controller", "Menu");	        $this->salida= $act->Formabusquedaproveedores($action,$tipos_id_prov,$request['buscador'],$datos,$conteo,$pagina,$empresita);	        return true;	    }	/**      * Funcion Menu Principal De Contratacion Proveedores      * @return boolean      */		function MenuPrincipal()		{			$request = $_REQUEST;			SessionSetVar("datos_completos",$request);			SessionSetVar("tipoid",$request['tipoid']);			$tipoid = SessionGetVar("tipoid");			SessionSetVar("codprov",$request['codprov']);			$codprov = SessionGetVar("codprov");			SessionSetVar("noid",$request['noid']);			$noid = SessionGetVar("noid");			$emp = SessionGetVar("DatosEmpresaCP");			/*print_r($request);*/						$empresita=$emp['empresa'];			$this->SetXajax(array("SelecNroContrato","SelNoContrato","SeNrContrato","SeContratoConsulta","SContratoConProduc","SeleccionarContratoCarta"), "app_modules/ContratacionProductos/RemoteXajax/DatosProveedor.php","ISO-8859-1");			$this->IncludeJS("CrossBrowser");			$this->IncludeJS("CrossBrowserEvent");			$this->IncludeJS("CrossBrowserDrag");			$action['nuevo'] = ModuloGetURL("app", "ContratacionProductos", "controller", "MenuNuevoContrato");            $action['parametros'] = ModuloGetURL("app", "ContratacionProductos", "controller", "MenuParametrosEnvioPolit");			$action['volver'] = ModuloGetURL("app", "ContratacionProductos", "controller", "BusquedaProveedor");			$act = AutoCarga::factory("ContratacionProductosHTML", "views", "app", "ContratacionProductos");			$this->salida = $act->FormaMenu2($action,$tipoid,$noid,$empresita);			return true;		}		/**		* Funcion Menu Nuevo Contrato		* Funcion que permite 		/*   -Crear un Nuevo Contrato		/*   -Copiar Un Contrato		* @return boolean		*/		function MenuNuevoContrato()		{			$request = $_REQUEST;			IncludeFileModulo("DatosProveedor","RemoteXajax","app","ContratacionProductos");			$this->SetXajax(array("SelecUniNroContrato","SeleccionarContratoCarta","SubirCarta"),null,"ISO-8859-1" );			$this->IncludeJS("CrossBrowser");			$this->IncludeJS("CrossBrowserEvent");			$this->IncludeJS("CrossBrowserDrag");			$emp = SessionGetVar("DatosEmpresaCP");			$empresota=$emp['empresa'];			$codprov = SessionGetVar("codprov");			$tipoid = SessionGetVar("tipoid");			$noid = SessionGetVar("noid");			$mdl = AutoCarga::factory("ContratacionProductosSQL", "classes", "app", "ContratacionProductos");			$datos= $mdl->ConsCodProveFiltro($noid,$tipoid);			$act = AutoCarga::factory("ContratacionProductosHTML", "views", "app", "ContratacionProductos");			$action['Contrato'] = ModuloGetURL("app", "ContratacionProductos", "controller", "NuevoContrato");			$action['copia_contrato'] = ModuloGetURL("app", "ContratacionProductos", "controller", "CopiarContrato");			$action['volver']=ModuloGetURL("app", "ContratacionProductos", "controller", "MenuPrincipal",array("tipoid"=>$tipoid,"noid"=>$noid,"codprov"=>$codprov));			$this->salida = $act->FormaMenuNuevoContrato($datos,$action,$empresota,$tipoid,$noid);			return true;		}    /**		* Funcion Nuevo Contrato para un Proveedor. 		* Funcion que permite;		*     -Listar los datos de la Empresa que contrata al proveedor.		*     -Visualiza los datos del proveedor		*     -Informacion basica del Contrato con el proveedor.		* @return boolean      */		function NuevoContrato()		{			$request = $_REQUEST;			$emp = SessionGetVar("DatosEmpresaCP");			$tipoid = SessionGetVar("tipoid");			$noid = SessionGetVar("noid");			$empresita=$emp['empresa'];			$mdl = AutoCarga::factory("ContratacionProductosSQL", "classes", "app", "ContratacionProductos");			$datos= $mdl->ConsCodProveFiltro($noid, $tipoid);			$datos_empresa=$mdl->ConsDatosEmpresa($emp);			$preg=$mdl->ConsultarExistenciasContrato($empresita,$tipoid,$noid);			$action['volver']=ModuloGetURL("app", "ContratacionProductos", "controller", "MenuNuevoContrato",array("tipoid"=>$tipoid,"noid"=>$noid,"codprov"=>$codprov));		 	$act = AutoCarga::factory("ContratacionProductosHTML", "views", "app", "ContratacionProductos");			$codprov = SessionGetVar("codprov");			if(!empty($preg))			{				$this->salida = $act->FormaMensajeExisteContratoActivo($action);				return true;			}			else			{				$action['guardar'] = ModuloGetURL("app", "ContratacionProductos", "controller", "InsertarContrato");				$this->salida = $act->FormaLlenarContrato($datos,$action,$datos_empresa);				return true;			}		}       /**		* Funcion Guardar Datos del contrato para un Proveedor. 		* Funcion que permite;		*     -Registrar la Informacion del Contrato.		* @return boolean	*/		function InsertarContrato()		{			$request = $_REQUEST;			$tipoid = SessionGetVar("tipoid");			$noid = SessionGetVar("noid");			$codprov = SessionGetVar("codprov");			$ingc = AutoCarga::factory("ContratacionProductosSQL", "classes", "app", "ContratacionProductos");     							$rst = $ingc->IngresarDatosContrato($request,$codprov);			if(!$rst)			{			$msg1 = "HA OCURRIDO UN ERROR MIENTRAS SE REALIZABA LA OPERACION<br>".$ingc->mensajeDeError;      $opcion=1;			} 			else			{			$msg1 = "EL INGRESO SE HA REALIZADO SATISFACTORIAMENTE";			}			$datos = $ingc->SelecMaxcontratacion_prod_id($tipoid,$noid,$codprov);			$dto=$datos[0]['numero'];			$frmcontra = AutoCarga::factory("ContratacionProductosHTML", "views", "app", "ContratacionProductos");			$action['productosco'] = ModuloGetURL("app", "ContratacionProductos", "controller", "MenuProducto",array("contratoid"=>$dto));      $action['volver']=ModuloGetURL("app", "ContratacionProductos", "controller", "NuevoContrato");			$this->salida = $frmcontra->FormaMensajeIngresoContrato($action, $msg0, $msg1,$codprov,$opcion);      			return true;		}			/**		* Funcion Menu del Producto 	      * Funcion que permite;	      *    - Buscar Productos  del Proveedor 	      *    - Listar Todos Los Productos que Existen	      *    - Asociar productos a un contrato.  	      *    - Agregar Precio o valor en % al producto	      * @return boolean	*/  		function MenuProducto()		{			$request = $_REQUEST;			IncludeFileModulo("DatosProveedor","RemoteXajax","app","ContratacionProductos");			$this->SetXajax(array("Eliminar_Producto_Seleccionado","Eliminar_tmp_contrato","ValidarDatosProducto","ProductosSeleccionados","MostrarLaboratorios","SeleccionarMolecula","Activar","Activar2", "ValidarDatosProducto","InsertarProductoAlContrato","ValidarTodosLosDatosProducto"),null,"ISO-8859-1" );			$this->IncludeJS("CrossBrowser");			$this->IncludeJS("CrossBrowserEvent");			$this->IncludeJS("CrossBrowserDrag");			$emp = SessionGetVar("DatosEmpresaCP");			$empresota=$emp['empresa'];			SessionSetVar("tipoi",$request['tipoid']);			$tipoid = SessionGetVar("tipoi");			SessionSetVar("noi",$request['noid']);			$noid = SessionGetVar("noi");			$codprov = SessionGetVar("codprov");			SessionSetVar("scontrato",$request['scontrato']);			$scontrato = SessionGetVar("scontrato");			SessionSetVar("proid",$request['proid']);			$proveid = SessionGetVar("proid");			SessionSetVar("contratoid",$request['contratoid']);			$contratoid = SessionGetVar("contratoid");			$mdl = AutoCarga::factory("ContratacionProductosSQL", "classes", "app", "ContratacionProductos");			$grupo=$mdl->ConsultarGrupoId();      			$act = AutoCarga::factory("ContratacionProductosHTML", "views", "app", "ContratacionProductos");			$conteo =$pagina=0;							if(!empty($request['buscador'] ))		{				$datos=$mdl->ObtenerProductos($request['buscador'],$request['offset'],$request,$empresota);				$datos_empresa=$mdl->ConsDatosEmpresa($emp);				$empresita=$datos_empresa['empresa_id'];				$action['buscador']=ModuloGetURL('app','ContratacionProductos','controller','MenuProducto',array("contratoid"=>$contratoid));				$conteo= $mdl->conteo;				$pagina= $mdl-> pagina;			}     	$action['paginador'] = ModuloGetURL("app", "ContratacionProductos", "controller", "MenuProducto", array("buscador"=>$request['buscador'],"contratoid"=>$contratoid));		  $this->salida= $act->FormaMenuProducto($action,$request['buscador'],$datos,$conteo,$pagina,$grupo,$scontrato,$empresita,$contratoid,$proveid,$tipoid,$noid,$codprov);			return true;		}	/**      * Funcion permite cargar imagenes  a la base de datos      * @return boolean      */    	function Subirimagen()		{			$request = $_REQUEST;           			$tipoid = SessionGetVar("tipoid");			$noid = SessionGetVar("noid");			$codprov = SessionGetVar("codprov");			$contratoid = SessionGetVar("contratoid");			$emp = SessionGetVar("DatosEmpresaCP");			$empresa=$emp['empresa'];			$action['imagensu'] = ModuloGetURL("app", "ContratacionProductos", "controller", "imagenesubi");			$action['continuar'] = ModuloGetURL("app", "ContratacionProductos", "controller", "PolticasVencimiento");			$mifcontra = AutoCarga::factory("ContratacionProductosSQL", "classes", "app", "ContratacionProductos");  			$dnom=$mifcontra->ConsultarInformacionContrato($contratoid,$empresa);  			$nome= $dnom[0] ['nombre_tercero'];			$act = AutoCarga::factory("ContratacionProductosCartasHTML", "views", "app", "ContratacionProductos");			$this->salida = $act->FormaSubir($action,$tipoid,$noid,$nome);			return true;		}	/**      * Funcion permite insertar la imagen  en una carpeta  determinada       * @return boolean      */		function imagenesubi()		{			$request = $_REQUEST;			$mifcontra = AutoCarga::factory("ContratacionProductosSQL", "classes", "app", "ContratacionProductos");  			$tipoid = SessionGetVar("tipoid");			$noid = SessionGetVar("noid");			$codprov = SessionGetVar("codprov");			$contratoid = SessionGetVar("contratoid");			$emp = SessionGetVar("DatosEmpresaCP");			$empresa=$emp['empresa'];			// archivo temporal (ruta y nombre).			$tmp_name = $_FILES["archivo"]["tmp_name"];			// Obtener del array FILES (superglobal) los datos del binario .. nombre, tabamo y tipo.			$numero = rand(0,1000);			$type = $_FILES["archivo"]["type"];			$size = $_FILES["archivo"]["size"];			$nombre = basename($_FILES["archivo"]["name"]);			$dataimg = explode(".",$nombre);			$renombrada = $contratoid.$noid.$numero.".".$dataimg[1];			$fp = fopen($tmp_name, "rb");			$buffer = fread($fp, filesize($tmp_name));			fclose($fp);			$buffer=addslashes($buffer);//pg_escape_bytea($buffer);			$path_upload = 'cartas/';			/*print_r($_SERVER['DOCUMENT_ROOT']);*/			if (is_uploaded_file($_FILES['archivo']['tmp_name']))			{				$renombrada = $contratoid.$noid.$numero.".".$dataimg[1];				$ruta_archivo =  $_SERVER['DOCUMENT_ROOT']."/SIIS_DM/app_modules/ContratacionProductos/cartas".$envio.'/'.$renombrada;				$this->nombre_archivos[$envio][$key] = $renombrada;				move_uploaded_file ( $_FILES['archivo']['tmp_name'], $ruta_archivo );				$lines = file($ruta_archivo);					} else {			}							$dat=$mifcontra->Insertar($renombrada, $size, $type, $buffer,$tipoid,$noid,$empresa); 			if(!$dat)			{				$msg1 = "HA OCURRIDO UN ERROR MIENTRAS SE REALIZABA LA OPERACION<br>".$ingc->mensajeDeError;			} 			else			{				$msg1 = "EL INGRESO SE HA REALIZADO SATISFACTORIAMENTE";			}			$frmcontra = AutoCarga::factory("ContratacionProductosCartasHTML", "views", "app", "ContratacionProductos");			$action['parametros'] = ModuloGetURL("app", "ContratacionProductos", "controller",  "PolticasVencimiento"); 			$action['volver'] = ModuloGetURL("app", "ContratacionProductos", "controller",  "MenuPrincipal",array("tipoid"=>$tipoid,"noid"=>$noid,"codprov"=>$codprov)); 			$this->salida = $frmcontra->FormaMensajeIngresocartas($action, $msg0, $msg1);			return true;		}	/**      * Funcion permite ingresar las politicas de vencimiento de un contrato       * @return boolean      */		function PolticasVencimiento()		{			$request = $_REQUEST;			$tipoid = SessionGetVar("tipoid");			$noid = SessionGetVar("noid");			$codprov = SessionGetVar("codprov");			$contratoid = SessionGetVar("contratoid");			$emp = SessionGetVar("DatosEmpresaCP");			$empresa=$emp['empresa'];			IncludeFileModulo("DatosProveedor","RemoteXajax","app","ContratacionProductos");			$this->SetXajax(array("parametrizarInformacion","InsertarPoliticasVencimiento"),null,"ISO-8859-1" );			$this->IncludeJS("CrossBrowser");			$this->IncludeJS("CrossBrowserEvent");			$this->IncludeJS("CrossBrowserDrag");			$contratacion = AutoCarga::factory('ContratacionProductosSQL', '', 'app', 'ContratacionProductos');			$datos=$contratacion->ConsultarTiposProductos();			$datos2=$contratacion->ConsultarInformacionContratoPoliticas($empresa,$tipoid,$noid,$contratoid);			$action['continuar'] = ModuloGetURL("app", "ContratacionProductos", "controller", "DiasDeEnvio");			$act = AutoCarga::factory("ContratacionProductosHTML", "views", "app", "ContratacionProductos");			$this->salida = $act->FormaMenuPolticas($action,$datos,$datos2);			return true;    		}	/**      * Funcion permite insertar los dias de envio de acuerdo al tipo de producto que se han asociado al contrato con el proveedor       * @return boolean      */		function DiasDeEnvio()		{     			$request = $_REQUEST;			$tipoid = SessionGetVar("tipoid");			$noid = SessionGetVar("noid");			$codprov = SessionGetVar("codprov");			$contratoid = SessionGetVar("contratoid");			$emp = SessionGetVar("DatosEmpresaCP");			$empresa=$emp['empresa'];			IncludeFileModulo("DatosProveedor","RemoteXajax","app","ContratacionProductos");			$this->SetXajax(array("ParametrizarDiasEnvio","InsertarDiasEnvio","validarInformacionDiasEnvio"),null,"ISO-8859-1" );			$this->IncludeJS("CrossBrowser");			$this->IncludeJS("CrossBrowserEvent");			$this->IncludeJS("CrossBrowserDrag");			$contratacion = AutoCarga::factory('ContratacionProductosSQL', '', 'app', 'ContratacionProductos');			$datos=$contratacion->ConsultarTiposProductos();			$action['continuar'] = ModuloGetURL("app", "ContratacionProductos", "controller", "MenuPrincipal",array("tipoid"=>$tipoid,"noid"=>$noid,"codprov"=>$codprov));			$act = AutoCarga::factory("ContratacionProductosHTML", "views", "app", "ContratacionProductos");			$this->salida = $act->FormaMenuDias($action,$datos);			return true;            }   /**      * Funcion Modificar  Contrato para un Proveedor.       * Funcion que permite;      *     -Listar los datos de la Empresa que contrata al proveedor.      *     -Visualiza los datos del proveedor      *     -Hacer las modificaciones correspondientes a los datos del  Contrato con el proveedor.      * @return boolean      */		function  ModificarInfoContrato()		{        $request = $_REQUEST;        SessionSetVar("contratacion_prod_id",$request['contratacion_prod_id']);        $contratacion_prod_id = SessionGetVar("contratacion_prod_id");        $tipoid = SessionGetVar("tipoid");        $noid = SessionGetVar("noid");        $codprov = SessionGetVar("codprov");        $contratoid = SessionGetVar("contratoid");        $formimfcontra = AutoCarga::factory("ContratacionProductosHTML", "views", "app", "ContratacionProductos");        $action['basico'] = ModuloGetURL("app", "ContratacionProductos", "controller", "ModificarInfoContratoBasico");        $action['politicas'] = ModuloGetURL("app", "ContratacionProductos", "controller", "PolticasVencimiento2",array("contratoid"=>$contratacion_prod_id));        $action['actualizar'] = ModuloGetURL("app", "ContratacionProductos", "controller", "ActualizarInfoContrato");        $action['productos'] = ModuloGetURL("app", "ContratacionProductos", "controller", "listaproductoasociContrato",array("contratoid"=>$contratacion_prod_id));        $action['dias'] = ModuloGetURL("app", "ContratacionProductos", "controller", "DiasDeEnvio2",array("contratoid"=>$contratacion_prod_id));        $action['volver'] = ModuloGetURL("app", "ContratacionProductos", "controller",  "MenuPrincipal",array("tipoid"=>$tipoid,"noid"=>$noid,"codprov"=>$codprov));         $this->salida = $formimfcontra->FormaMenuModificar($action);        return true;	    }	/**      * Funcion permite modificar la informacion basica  del  contrato con el proveedor      * @return boolean      */          function ModificarInfoContratoBasico()        {             $request = $_REQUEST;            $codprov = SessionGetVar("codprov");            $emp = SessionGetVar("DatosEmpresaCP");            $tipoid = SessionGetVar("tipoid");            $noid = SessionGetVar("noid");            $contratacion_prod_id = SessionGetVar("contratacion_prod_id");            $mifcontra = AutoCarga::factory("ContratacionProductosSQL", "classes", "app", "ContratacionProductos");              $empresita=$emp['empresa'];            $datos_empresa=$mifcontra->ConsDatosEmpresa($emp);                    $datosncontrato = $mifcontra->ConsultarInformacionContrato($contratacion_prod_id,$empresita);            $scontrato=$request['scontrato'];            $action['volver'] = ModuloGetURL("app", "ContratacionProductos", "controller",  "ModificarInfoContrato",array("contratacion_prod_id"=>$contratacion_prod_id));             $formimfcontra = AutoCarga::factory("ContratacionProductosHTML", "views", "app", "ContratacionProductos");            $action['actualizar'] = ModuloGetURL("app", "ContratacionProductos", "controller", "ActualizarInfoContrato");            $this->salida = $formimfcontra->FormaModificarConsultarContrato($datosncontrato,$action,$datos_empresa,$scontrato);            return true;        }	/**      * Funcion Actualizar Informaciòn del  Contrato para un Proveedor.       * Funcion que permite;      *   -Actualizar y guardar  la Informacion del contrato para un proveedor      * @return boolean      */		function ActualizarInfoContrato()		{        $request = $_REQUEST;        $codprov = SessionGetVar("codprov");        $emp = SessionGetVar("DatosEmpresaCP");        $tipoid = SessionGetVar("tipoid");        $noid = SessionGetVar("noid");        $contratacion_prod_id = SessionGetVar("contratacion_prod_id");        IncludeFileModulo("DatosProveedor","RemoteXajax","app","ContratacionProductos");        $this->SetXajax(array( "ListaProdContrato"),null,"ISO-8859-1" );        $this->IncludeJS("CrossBrowser");        $this->IncludeJS("CrossBrowserEvent");        $this->IncludeJS("CrossBrowserDrag");        $emp = SessionGetVar("DatosEmpresaCP");        $empresita=$emp['empresa'];        $actinfcont = AutoCarga::factory("ContratacionProductosSQL", "classes", "app", "ContratacionProductos");             $rst = $actinfcont->ActualizarInformacionContrato($request,$contratacion_prod_id);			if($rst)	        {				$msg1 = "HA OCURRIDO UN ERROR MIENTRAS SE REALIZABA LA OPERACION<br>".$ingc->mensajeDeError;	        } 	        else	        {				$msg1 = "SE HA ACTUALIZADO LA INFORMACIÒN CORRECTAMENTE";	        }        $action['volver'] = ModuloGetURL("app", "ContratacionProductos", "controller", "ModificarInfoContrato",array("contratacion_prod_id"=>$contratacion_prod_id));         $frmcontra = AutoCarga::factory("ContratacionProductosHTML", "views", "app", "ContratacionProductos");        $this->salida = $frmcontra->FormaMensajeActualizarContrato($action, $msg0, $msg1,$contrav,$contratosus,$contratacion_prod_id,$request['buscador']);        return true;		}	/**      * Funcion permite modificar las politicas de vencimiento pero en este caso hay links que se redireccionan       * @return boolean      */		 function PolticasVencimiento2()		{			$request = $_REQUEST;			$tipoid = SessionGetVar("tipoid");			$noid = SessionGetVar("noid");			$codprov = SessionGetVar("codprov");			SessionSetVar("contratoid",$request['contratoid']);		    $contratoid = SessionGetVar("contratoid");			$emp = SessionGetVar("DatosEmpresaCP");			$empresa=$emp['empresa'];			IncludeFileModulo("DatosProveedor","RemoteXajax","app","ContratacionProductos");			$this->SetXajax(array("parametrizarInformacion","InsertarPoliticasVencimiento"),null,"ISO-8859-1" );			$this->IncludeJS("CrossBrowser");			$this->IncludeJS("CrossBrowserEvent");			$this->IncludeJS("CrossBrowserDrag");			$contratacion = AutoCarga::factory('ContratacionProductosSQL', '', 'app', 'ContratacionProductos');			$datos=$contratacion->ConsultarTiposProductos();			$datos2=$contratacion->ConsultarInformacionContratoPoliticas($empresa,$tipoid,$noid,$contratoid);			$action['continuar'] = ModuloGetURL("app", "ContratacionProductos", "controller", "DiasDeEnvio2");			$act = AutoCarga::factory("ContratacionProductosHTML", "views", "app", "ContratacionProductos");			$this->salida = $act->FormaMenuPolticas($action,$datos,$datos2);			return true;    		}	/**      * Funcion permite modificar los dias de envio  pero en este caso hay links que se redireccionan       * @return boolean       */					function DiasDeEnvio2()		{     			$request = $_REQUEST;			$tipoid = SessionGetVar("tipoid");			$noid = SessionGetVar("noid");			$codprov = SessionGetVar("codprov");			$contratoid = SessionGetVar("contratoid");			$emp = SessionGetVar("DatosEmpresaCP");			$empresa=$emp['empresa'];			IncludeFileModulo("DatosProveedor","RemoteXajax","app","ContratacionProductos");			$this->SetXajax(array("ParametrizarDiasEnvio","InsertarDiasEnvio","validarInformacionDiasEnvio"),null,"ISO-8859-1" );			$this->IncludeJS("CrossBrowser");			$this->IncludeJS("CrossBrowserEvent");			$this->IncludeJS("CrossBrowserDrag");			$contratacion = AutoCarga::factory('ContratacionProductosSQL', '', 'app', 'ContratacionProductos');			$datos=$contratacion->ConsultarTiposProductos();		    $action['continuar'] = ModuloGetURL("app", "ContratacionProductos", "controller", "ModificarInfoContrato",array("contratacion_prod_id"=>$contratoid)); 			$act = AutoCarga::factory("ContratacionProductosHTML", "views", "app", "ContratacionProductos");			$this->salida = $act->FormaMenuDias($action,$datos);			return true;            }		   /**      * Funcion  listar los productos de cualquier contrato activo      * @return boolean      */		function listaproductoasociContrato()		{			$request = $_REQUEST;			$codprov = SessionGetVar("codprov");			$contratacion_prod_id = SessionGetVar("contratacion_prod_id");			$emp = SessionGetVar("DatosEmpresaCP");			$empresa=$emp['empresa'];			IncludeFileModulo("DatosProveedor","RemoteXajax","app","ContratacionProductos");			$this->SetXajax(array( "eliminar"),null,"ISO-8859-1" );			$this->IncludeJS("CrossBrowser");			$this->IncludeJS("CrossBrowserEvent");			$this->IncludeJS("CrossBrowserDrag");						$sel = AutoCarga::factory("ContratacionProductosSQL", "", "app", "ContratacionProductos");			$contratosus=$request['contratosus'];			$tipoid = SessionGetVar("tipoid");			$noid = SessionGetVar("noid");			$conteo =$pagina=0;			if(!empty($request['buscador']))			{				$contrato_id= $sel->FiltroProductosCont($request['buscador'],$request['offset'],$contratacion_prod_id);				$action['buscador']=ModuloGetURL('app','ContratacionProductos','controller','listaproductoasociContrato');				$conteo= $sel->conteo;				$pagina= $sel-> pagina;			}			$action['paginador'] = ModuloGetURL("app", "ContratacionProductos", "controller", "listaproductoasociContrato",array("buscador"=>$request['buscador']));			$action['volver'] = ModuloGetURL("app", "ContratacionProductos", "controller",  "MenuPrincipal",array("tipoid"=>$tipoid,"noid"=>$noid ));			$action['otroproducto'] = ModuloGetURL("app", "ContratacionProductos", "controller",  "MenuProducto",array("tipoid"=>$tipoid,"noid"=>$noid,"contratoid"=>$contratacion_prod_id));			$frmcontra = AutoCarga::factory("ContratacionProductosHTML", "views", "app", "ContratacionProductos");			$this->salida = $frmcontra->FormaBuscaryListarProductoContrato($contrato_id,$contratosus,$action,$contratacion_prod_id,$empresa,$conteo,$pagina);        	return true;		}						function PoliticasProducto ()		{		$request = $_REQUEST;		$codprov = SessionGetVar("codprov");		$datos_completos = SessionGetVar("datos_completos");		$contratacion_prod_id = SessionGetVar("contratacion_prod_id");		$emp = SessionGetVar("DatosEmpresaCP");		$html = AutoCarga::factory("ContratacionProductosHTML", "views", "app", "ContratacionProductos");		$sql = AutoCarga::factory("ContratacionProductosSQL", "", "app", "ContratacionProductos");						if($request['politica']['eliminar']=='1')		$sql->Eliminar_PoliticaProducto($request['datos_producto'],$request['politica']);						if($request['politica']['guardar']=='1')		$sql->Insertar_PoliticaProductoProveedor($request['datos_producto'],$request['politica']);				$politicas = $sql->Obtener_PoliticasProductoProveedor($request['datos_producto']);				$action['guardar'] = ModuloGetURL("app", "ContratacionProductos", "controller", "PoliticasProducto",	array("datos_producto"=>																																					array(	"codigo_producto"=>$request['datos_producto']['codigo_producto'],																																						"descripcion"=>$request['datos_producto']['descripcion'],																																						"contrato_produc_prov_det_id"=>$request['datos_producto']['contrato_produc_prov_det_id'],																																						"contratacion_prod_id"=>$request['datos_producto']['contratacion_prod_id'],																																						"empresa_id"=>$request['datos_producto']['empresa_id'])));		$action['volver'] = ModuloGetURL("app", "ContratacionProductos", "controller",  "listaproductoasociContrato",array("contratoid"=>$request['datos_producto']['contratacion_prod_id']));		$this->salida = $html->Forma_ProductosPoliticas($action,$datos_completos,$request,$politicas);		return true;		}										/**		* Funcion Consultar Contrato. 		* Funcion que permite:		*    - Seleccionar el contrato de un Proveedor. 		*    - Mostrar Toda la Informacion( informacion basica - productos ) del Contrato. 		* @return boolean		*/  		function ConsultaContrato()		{			$request = $_REQUEST;			$tipoid = SessionGetVar("tipoid");			$noid = SessionGetVar("noid");			$codprov = SessionGetVar("codprov");			$emp = SessionGetVar("DatosEmpresaCP");			$empresa=$emp['empresa'];			$contratacion_prod_id=$request['contratacion_prod_id'];			$mifcontra = AutoCarga::factory("ContratacionProductosSQL", "classes", "app", "ContratacionProductos");  			$dcontrato= $mifcontra->ConsultarInformacionContrato($contratacion_prod_id,$empresa);			$datos_empresa=$mifcontra->ConsDatosEmpresa($emp);  			$datosproductos= $mifcontra->ConsultarProductosContrato($contratacion_prod_id);			$datospolitica= $mifcontra->ConsultarInfoPolitica($contratacion_prod_id);			$datoenv= $mifcontra->ConsultarInfoEv($contratacion_prod_id);	   		$formimfcontra = AutoCarga::factory("ContratacionProductosHTML", "views", "app", "ContratacionProductos");			$action['actualiza'] = ModuloGetURL("app", "ContratacionProductos", "controller", "IngresarContratoaCopiar",array("scontrato"=>$request['scontrato']));			$action['volver'] = ModuloGetURL("app", "ContratacionProductos", "controller",  "MenuPrincipal",array("tipoid"=>$tipoid,"noid"=>$noid ));			$this->salida = $formimfcontra->FormaConsultarContratoCompleto($dcontrato,$datosproductos,$action,$datos_empresa,$datospolitica,$datoenv);		    return true;		} 	/**      * Funcion Modificar el estado de un Contrato para un Proveedor.       * Funcion que permite;      *   -Cambiar el estado del contrato de Activo a Inactivo      * @return boolean      */		function ModificarEstadoContrato()		{ 			$request = $_REQUEST;            $tipoid = SessionGetVar("tipoid");			$noid = SessionGetVar("noid");			$codprov = SessionGetVar("codprov");			$contratoid = SessionGetVar("contratoid");			$emp = SessionGetVar("DatosEmpresaCP");			$empresa=$emp['empresa'];			$action['volver'] = ModuloGetURL("app", "ContratacionProductos", "controller", "MenuPrincipal",array("tipoid"=>$tipoid,"noid"=>$noid,"codprov"=>$codprov));			$act = AutoCarga::factory("ContratacionProductosHTML", "views", "app", "ContratacionProductos");			$action['estadito']=ModuloGetURL("app", "ContratacionProductos", "controller", "ActualizarModificarEstadoContrato");			$this->salida = $act->FormaObservacionEstado($request,$action);			return true;		}   /*      **Funcion Actulizar el estado del contrato      /* Funcion que permite:      /* - Registrar el Estado del Contrato       * @return boolean      */	    function ActualizarModificarEstadoContrato()      {          $request = $_REQUEST;          $tipoid = SessionGetVar("tipoid");          $noid = SessionGetVar("noid");          $codprov = SessionGetVar("codprov");          $emp = SessionGetVar("DatosEmpresaCP");            $empresa=$emp['empresa'];          $idcontrato=$request['contratacion_prod_id'];          $ingc = AutoCarga::factory("ContratacionProductosSQL", "classes", "app", "ContratacionProductos");           $rst = $ingc->AtualizarEstadoContrato($request, $request['contratacion_prod']);    			if($rst)    			{    			$msg1 = "HA OCURRIDO UN ERROR MIENTRAS SE REALIZABA LA OPERACION<br>".$ingc->mensajeDeError;    			}     			else    			{    			$msg1 = "EL INGRESO SE HA REALIZADO SATISFACTORIAMENTE";    			}    			$frmcontra = AutoCarga::factory("ContratacionProductosHTML", "views", "app", "ContratacionProductos");    			$action['volver'] = ModuloGetURL("app", "ContratacionProductos", "controller",  "MenuPrincipal",array("tipoid"=>$tipoid,"noid"=>$noid,"codprov"=>$codprov));      			$this->salida = $frmcontra->FormaMensajeActatrato($action, $msg0, $msg1);    			    			return true;	      }     /**      * Funcion Copiar Datos del contrato para un Proveedor.       * Funcion que permite;      *     -Seleccionar un Contrato Inactivo  del Proveedor.      *     -Informacion Completa del  Contrato Inactivo (Informacion Basica + productos) del Proveedor.      *     -Si el Contrato No tiene Productos Asociados entonces Permite ir al Menu del producto.      * @return boolean      */		function CopiaContrato()		{        $request = $_REQUEST;        $tipoid = SessionGetVar("tipoid");        $noid = SessionGetVar("noid");        $codprov = SessionGetVar("codprov");        $contratoid = SessionGetVar("contratoid");        $emp = SessionGetVar("DatosEmpresaCP");        $empresa=$emp['empresa'];        SessionSetVar("contratacion_prod_id",$request['contratacion_prod_id']);        $contratacion_prod_id = SessionGetVar("contratacion_prod_id");        $mifcontra = AutoCarga::factory("ContratacionProductosSQL", "classes", "app", "ContratacionProductos");          $datosnco = $mifcontra->ConsultarInformacionContrato($contratacion_prod_id,$empresa);        $datosproductos= $mifcontra->ConsultarProductosContrato($contratacion_prod_id);        $datos_empresa=$mifcontra->ConsDatosEmpresa($emp);        $action['volver'] = ModuloGetURL("app", "ContratacionProductos", "controller",  "MenuPrincipal",array("tipoid"=>$tipoid,"noid"=>$noid,"codprov"=>$codprov));          $formimfcontra = AutoCarga::factory("ContratacionProductosHTML", "views", "app", "ContratacionProductos");        $action['actualiza'] = ModuloGetURL("app", "ContratacionProductos", "controller", "IngresarContratoaCopiar");        $this->salida = $formimfcontra->FormaCopiarContrato($datosnco,$action,$datos_empresa,$scontrato,$datosproductos);        return true;        }     /**      * Funcion Guardar la Copia del Contrato para un Proveedor.       * Funcion que permite;      *     -Registrar la Informacion del Contrato.      *     -El estado del Contrato cambia a Activo.      * @return boolean      */        function IngresarContratoaCopiar()		{        $request = $_REQUEST;        $tipoid = SessionGetVar("tipoid");        $noid = SessionGetVar("noid");        $codprov = SessionGetVar("codprov");        $contratoid = SessionGetVar("contratoid");        $emp = SessionGetVar("DatosEmpresaCP");        $empresa=$emp['empresa'];        $contratacion_prod_id = SessionGetVar("contratacion_prod_id");        IncludeFileModulo("DatosProveedor","RemoteXajax","app","ContratacionProductos");        $this->SetXajax(array( "ValidarTodosLosDatosProductos","InsertarProductoAlContratoCopia"),null,"ISO-8859-1" );        $this->IncludeJS("CrossBrowser");        $this->IncludeJS("CrossBrowserEvent");        $this->IncludeJS("CrossBrowserDrag");        $emp = SessionGetVar("DatosEmpresaCP");        $actinfcont = AutoCarga::factory("ContratacionProductosSQL", "classes", "app", "ContratacionProductos");         $datos_empresa=$actinfcont->ConsDatosEmpresa($emp);        $rst = $actinfcont->ActualizarTodaInfoContrato($request,$contratacion_prod_id);        $infcontrato= $actinfcont->ConsultarInformacionContrato($contratacion_prod_id,$empresa);        $contrato_id= $actinfcont->ConsultarProductosContrato($contratacion_prod_id);        $action['volver'] = ModuloGetURL("app", "ContratacionProductos", "controller",  "MenuPrincipal",array("tipoid"=>$tipoid,"noid"=>$noid,"codprov"=>$codprov));          $formimfcontra = AutoCarga::factory("ContratacionProductosHTML", "views", "app", "ContratacionProductos");        $this->salida = $formimfcontra->FormaMostarProductos($action,$contrato_id,$varia,$empresa,$contratacion_prod_id);        return true;	    }	/**      * Funcion listan todas las farmacias      * @return boolean      */		function ListaFarmacias()		{			$request = $_REQUEST;			IncludeFileModulo("DatosProveedor","RemoteXajax","app","ContratacionProductos");			$this->SetXajax(array("Bodegas","ListaBodeEmpresa","SubirCarta"),null,"ISO-8859-1" );			$this->IncludeJS("CrossBrowser");			$this->IncludeJS("CrossBrowserEvent");			$this->IncludeJS("CrossBrowserDrag");			$emp = SessionGetVar("DatosEmpresaCP");			$mdl = AutoCarga::factory("ContratacionProductosSQL", "classes", "app", "ContratacionProductos");			$TipoIdE = $mdl->ConsultarTipoId();			$act = AutoCarga::factory("ContratacionProductosHTML", "views", "app", "ContratacionProductos");			$conteo =$pagina=0;			if(!empty($request['buscador']))			{				$datos=$mdl->BuscarFarmacias($request['buscador'],$request['offset']);				$action['buscador']=ModuloGetURL('app','ContratacionProductos','controller','ListaFarmacias');				$action['paginador'] = ModuloGetURL("app", "ContratacionProductos", "controller", "ListaFarmacias",array("buscador"=>$request['buscador']));				$conteo= $mdl->conteo;				$pagina= $mdl-> pagina;			}			$action['volver'] = ModuloGetURL("app", "ContratacionProductos", "controller", "Menu");			$this->salida = $act->FormaBuscarEmpresas($action,$TipoIdE,$request['buscador'],$datos,$conteo,$pagina);			return true;		} 	/*  Funcion donde se listan las Empresas que tienen planes */    	function Empresas_Planes_Activos()		{			$request = $_REQUEST;			$empresa=$request['Empresa'];			$bodega=$request['bodega'];			$centro=$request['centro'];			$mdl = AutoCarga::factory("ContratacionProductosSQL", "classes", "app", "ContratacionProductos");			$datos = $mdl->Consultar_Empresa_Planes();           	$action['empresa_planes'] = ModuloGetURL("app", "ContratacionProductos", "controller", "Asociaciones",array ("Empresa"=>$empresa,"centro"=>$centro,"bodega"=>$bodega));			$act = AutoCarga::factory("ContratacionProductosHTML", "views", "app", "ContratacionProductos");			$action['volver'] = ModuloGetURL("app", "ContratacionProductos", "controller", "ListaFarmacias");			$this->salida = $act->FormaEmpresas_Planes($action,$datos);		   return true;		}							/**      * Funcion donde se asocian las farmacias con los contratos      * @return boolean      */ 		function Asociaciones()		{        $request = $_REQUEST;        $empresa=$request['Empresa'];        $bodega=$request['bodega'];        $centro=$request['centro'];		$empresa_plan=$request['empresa_plane'];	        IncludeFileModulo("DatosProveedor","RemoteXajax","app","ContratacionProductos");        $this->SetXajax(array("AsociarPlan","Planes_Elimina_","ConsultarPlanesAsociados"),null,"ISO-8859-1");        $this->IncludeJS("CrossBrowser");        $this->IncludeJS("CrossBrowserEvent");        $this->IncludeJS("CrossBrowserDrag");        $emp = SessionGetVar("DatosEmpresaCP");        $empresita=$emp['empresa'];        $mdl = AutoCarga::factory("ContratacionProductosSQL", "classes", "app", "ContratacionProductos");        $datos=$mdl->PlanesAsociadosAFarmacias($empresa,$centro,$bodega);        $planes=$mdl->ConsultarPlanes($empresita,$empresa,$centro,$bodega,$empresa_plan);        $act = AutoCarga::factory("ContratacionProductosHTML", "views", "app", "ContratacionProductos");        $action['volver'] = ModuloGetURL("app", "ContratacionProductos", "controller", "Empresas_Planes_Activos",array ("Empresa"=>$empresa,"centro"=>$centro,"bodega"=>$bodega));        $this->salida = $act->FormaRealizarAsociacion($action,$datos,$planes,$empresa_plan);        return true;		}}?>