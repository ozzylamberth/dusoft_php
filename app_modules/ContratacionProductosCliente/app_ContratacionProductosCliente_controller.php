<?php/** * @package IPSOFT-SIIS * @version $Id: app_ContratacionProductosCliente_controller.php,v 1.14 2010/01/26 22:40:55 sandra Exp $Revision: 1.14 $ * @copyright (C) 2009 IPSOFT - SA (www.ipsoft-sa.com) * @author Mauricio Adrian Medina Santacruz *//** * Clase Control: ContratacionProductos * Clase encargada del control de llamado de metodos en el modulo * * @package IPSOFT-SIIS * @version $Revision: 1.14 $request = $_REQUEST;  / */class app_ContratacionProductosCliente_controller extends classModulo {    /**     * Constructor de la clase     */    function app_ContratacionProductosCliente_controller()    {            }    /**     * Funcion principal del modulo     * @return boolean     */    function Main()    {        $request = $_REQUEST;        $contratacion = AutoCarga::factory('PermisosSQL', '', 'app', 'ContratacionProductosCliente');        $action['volver'] = ModuloGetURL('system', 'Menu');        $permisos = $contratacion->ObtenerPermisos();        $ttl_gral = "CONTRATACION DE PRODUCTOS CON EL CLIENTE";        $titulo[0] = 'EMPRESAS';        $url[0] = 'app';        $url[1] = 'ContratacionProductosCliente';        $url[2] = 'controller';        $url[3] = 'MenuPrincipal';        $url[4] = 'datos';        $this->salida = gui_theme_menu_acceso($ttl_gral, $titulo, $permisos, $url, $action['volver']);        return true;    }    /**     * Funcion Menu Principal De Contratacion Proveedores     * @return boolean     */    function MenuPrincipal()    {        $request = $_REQUEST;        if ($_REQUEST['datos'])            SessionSetVar("Datos", $_REQUEST['datos']);        $datos = SessionGetVar("Datos");        $action['volver'] = ModuloGetURL("app", "ContratacionProductosCliente", "controller", "Main");        $act = AutoCarga::factory("ContratacionProductosClienteHTML", "views", "app", "ContratacionProductosCliente");        $this->salida = $act->FormaMenu($action, $datos);        return true;    }    /**     * Funcion Menu Nuevo Contrato     * Funcion que permite       /*   -Crear un Nuevo Contrato      /*   -Copiar Un Contrato     * @return boolean     */    function Contratos()    {        $request = $_REQUEST;        $datos = SessionGetVar("Datos");        /* print_r($_REQUEST); */        $action['Crear_Contrato'] = ModuloGetURL("app", "ContratacionProductosCliente", "controller", "Crear_Contrato", array("nuevo_contrato" => "1"));        $action['volver'] = ModuloGetURL("app", "ContratacionProductosCliente", "controller", "MenuPrincipal");        $action['paginador'] = ModuloGetURL('app', 'ContratacionProductosCliente', 'controller', 'Contratos', array("buscador" => $request['buscador']));        $act = AutoCarga::factory("ContratacionProductosClienteHTML", "views", "app", "ContratacionProductosCliente");        $sql = AutoCarga::factory("ContratacionProductosClienteSQL", "classes", "app", "ContratacionProductosCliente");        if ($_REQUEST['cambiar_estado'] == '1')            $sql->Inactivar_Contrato($_REQUEST['contrato_cliente_id']);        $Contratos = $sql->Listado_Contratos($datos['empresa'], $request['buscador'], $request['offset']);        $this->salida = $act->Listado_Contratos($action, $datos, $Contratos, $sql->conteo, $sql->pagina);        return true;    }    /**     * Funcion Menu Nuevo Contrato     * Funcion que permite       /*   -Crear un Nuevo Contrato      /*   -Copiar Un Contrato     * @return boolean     */    function Crear_Contrato()    {        $request = $_REQUEST;        IncludeFileModulo("RemotosContratacionProductosCliente", "RemoteXajax", "app", "ContratacionProductosCliente");        $this->SetXajax(array("InsertarContrato", "BuscarTerceroCliente", "Listado_TerceroCliente"), null, "ISO-8859-1");        $datos = SessionGetVar("Datos");        $this->IncludeJS("CrossBrowser");        $this->IncludeJS("CrossBrowserEvent");        $this->IncludeJS("CrossBrowserDrag");        $act = AutoCarga::factory("ContratacionProductosClienteHTML", "views", "app", "ContratacionProductosCliente");        $sql = AutoCarga::factory("ContratacionProductosClienteSQL", "classes", "app", "ContratacionProductosCliente");        if ($_REQUEST['eliminar'] == '1')            $sql->Eliminar_ItemContrato($_REQUEST['contrato_cliente_id'], $_REQUEST['codigo_producto']);		if ($_REQUEST['eliminar'] == '2')            $sql->Eliminar_Items_Contrato($_REQUEST['contrato_cliente_id']);		        if ($_REQUEST['consulta'] == '1')        {            $token = $sql->IngresarDatosContrato($_REQUEST);        }        else        if ($_REQUEST['consulta'] == '0')        {            $token = $sql->ModificarContratoVigente($_REQUEST);        }        $script .= "<script>";        if ($token && $_REQUEST['consulta'] == '0')        {            if ($_REQUEST['tipo_contrato'] == '1')            {                $tipo_id_tercero = $_REQUEST['tipo_id_tercero'];                $tercero_id = $_REQUEST['tercero_id'];            }            else            if ($_REQUEST['tipo_contrato'] == '2')            {                $codigo_unidad_negocio = $_REQUEST['codigo_unidad_negocio'];            }            else            if ($_REQUEST['tipo_contrato'] == '3')            {                $tipo_id_tercero = "";                $tercero_id = "";                $codigo_unidad_negocio = "";            }            $action['recarga'] = ModuloGetURL("app", "ContratacionProductosCliente", "controller", "Crear_Contrato", array("tipo_id_tercero" => $tipo_id_tercero, "tercero_id" => $tercero_id, "codigo_unidad_negocio" => $codigo_unidad_negocio));            $script .= "alert('Exito En La Consulta');";            $script .= "window.location=\"" . $action['recarga'] . "\";";        }        $script .= "</script>";        if ($_REQUEST['nuevo_contrato'] != '1')            $Contrato = $sql->ConsultarContratoVigente($_REQUEST, $datos['empresa']);        $unidades_negocio = $sql->UnidadesNegocio($Contrato);        $Vendedores = $sql->Vendedores();        $action['volver'] = ModuloGetURL("app", "ContratacionProductosCliente", "controller", "Contratos");        $action['guardar'] = ModuloGetURL("app", "ContratacionProductosCliente", "controller", "Crear_Contrato");		$action['eliminar'] = ModuloGetURL('app', 'ContratacionProductosCliente', 'controller', 'Crear_Contrato', array("eliminar" => "2", "contrato_cliente_id" => $_REQUEST['contrato_cliente_id']));        $action['paginador'] = ModuloGetURL('app', 'ContratacionProductosCliente', 'controller', 'Crear_Contrato', array("buscador" => $request['buscador'], "contrato_cliente_id" => $_REQUEST['contrato_cliente_id'], "tipo_id_tercero" => $_REQUEST['tipo_id_tercero'], "tercero_id" => $_REQUEST['tercero_id'], "codigo_unidad_negocio" => $_REQUEST['codigo_unidad_negocio'], "tipo_contrato" => $_REQUEST['tipo_contrato']));        $action['buscar'] = ModuloGetURL("app", "ContratacionProductosCliente", "controller", "Crear_Contrato");        $ProductosContrato = $sql->ListaProductosContrato($_REQUEST['contrato_cliente_id'], $request['buscador'], $request['offset']);        $this->salida = $script;        $this->salida .= $act->Forma_Contrato($datos, $action, $unidades_negocio, $Vendedores, $Contrato, $ProductosContrato, $sql->conteo, $sql->pagina);        return true;    }	/**     * Funcion Menu Nuevo Producto      * Funcion que permite       /*   -Crear un Nuevo producto para todos los contratos     * @return boolean     */    function Crear_Producto()    {        $request = $_REQUEST;        $datos = SessionGetVar("Datos");        IncludeFileModulo("RemotosContratacionProductosCliente", "RemoteXajax", "app", "ContratacionProductosCliente");        $this->SetXajax(array("InsertarContrato"), null, "ISO-8859-1");        $this->IncludeJS("CrossBrowser");        $this->IncludeJS("CrossBrowserEvent");        $this->IncludeJS("CrossBrowserDrag");        $act = AutoCarga::factory("ContratacionProductosClienteHTML", "views", "app", "ContratacionProductosCliente");        $sql = AutoCarga::factory("ContratacionProductosClienteSQL", "classes", "app", "ContratacionProductosCliente");        $action['volver'] = ModuloGetURL("app", "ContratacionProductosCliente", "controller", "MenuPrincipal");        $action['guardar'] = ModuloGetURL("app", "ContratacionProductosCliente", "controller", "Crear_Producto");        $action['buscar'] = ModuloGetURL("app", "ContratacionProductosCliente", "controller", "Crear_Producto");        $action['paginador'] = ModuloGetURL('app', 'ContratacionProductosCliente', 'controller', 'Crear_Producto', array("buscador" => $request['buscador']));        if ($_REQUEST['cantidad_registros'] > 0)        {            for ($i = 0; $i < $_REQUEST['cantidad_registros']; $i++)            {                if ($_REQUEST[$i] != "")					                    $token = $sql->Insertar_Producto_Contratos($_REQUEST[$i], $_REQUEST['precio_pactado' . $i]);            }        }        if (!empty($request['buscador']))        {            $productos_inventario = $sql->Lista_Productos($request['buscador'], $datos['empresa'], $request['offset']);        }        $this->salida .= $act->Productos_Todos_Contrato($datos, $action, $productos_inventario, $sql->conteo, $sql->pagina);        return true;    }		    function Productos_Contrato()    {			        $request = $_REQUEST;        $datos = SessionGetVar("Datos");        IncludeFileModulo("RemotosContratacionProductosCliente", "RemoteXajax", "app", "ContratacionProductosCliente");        $this->SetXajax(array("InsertarContrato"), null, "ISO-8859-1");        $this->IncludeJS("CrossBrowser");        $this->IncludeJS("CrossBrowserEvent");        $this->IncludeJS("CrossBrowserDrag");        $act = AutoCarga::factory("ContratacionProductosClienteHTML", "views", "app", "ContratacionProductosCliente");        $sql = AutoCarga::factory("ContratacionProductosClienteSQL", "classes", "app", "ContratacionProductosCliente");        $action['volver'] = ModuloGetURL("app", "ContratacionProductosCliente", "controller", "Contratos");		$action['guardar'] = ModuloGetURL("app", "ContratacionProductosCliente", "controller", "Productos_Contrato");        $action['buscar'] = ModuloGetURL("app", "ContratacionProductosCliente", "controller", "Productos_Contrato");        $action['paginador'] = ModuloGetURL('app', 'ContratacionProductosCliente', 'controller', 'Productos_Contrato', array("buscador" => $request['buscador'], "contrato_cliente_id" => $request['contrato_cliente_id']));        if ($_REQUEST['cantidad_registros'] > 0)        {            for ($i = 0; $i < $_REQUEST['cantidad_registros']; $i++)            {                if ($_REQUEST[$i] != "")                    $token = $sql->InsertarProducto_Contrato($_REQUEST['contrato_cliente_id'], $_REQUEST[$i], $_REQUEST['precio_pactado' . $i]);            }        }	        //valida si existe un archivo plano        if(isset($_FILES) && count($_FILES) > 0){		             if($this->esCsvValido($_FILES['archivo_plano']['type'])){                                $csvdatos = array("contrato_cliente_id" => $request['contrato_cliente_id']);				                $resultado = $this->insertarProductosDesdePlano2($csvdatos);                if(count($resultado["novalidos"]) > 0){                    $dir_siis = GetVarConfigAplication('DIR_SIIS');                    $path = $dir_siis."tmp/productos_contratos/productosclientelogs.txt";                    $fp = fopen($path,"w+");					                    fwrite($fp,"Total de productos con error: ".count($resultado["novalidos"]). PHP_EOL.PHP_EOL);					                    foreach($resultado["novalidos"] as $r){												                        fwrite($fp,"\r\n Codigo Producto ".$r["codigo_producto"]." precio pactado ".$r["precio"]. " Error ".$r["mensaje"] . PHP_EOL.PHP_EOL);                    }                     fclose($fp);                     $doc = ModuloGetURL("app", "ContratacionProductosCliente", "controller", "LogProductos");					                 }else{					$success = "Productos agregados exitosamente";				}             } else {				 $error = "El archivo no es valido";             }        }						        $Contrato = $sql->ConsultarContratoVigente($_REQUEST, $datos['empresa']);        if (!empty($request['buscador']))        {            $productos_inventario = $sql->ListaProductosInventario($request['buscador'], $datos['empresa'], $_REQUEST['contrato_cliente_id'], $request['offset']);        }        $this->salida .= $act->Productos_Contrato($datos, $action, $Contrato, $productos_inventario, $sql->conteo, $sql->pagina, $error, $success, $doc);        return true;    }    /**     * Funcion Menu Nuevo Contrato     * Funcion que permite      *   -Crear un Nuevo Contrato     *   -Copiar Un Contrato     * @return boolean     */    function Terceros_Cotizacion()    {        $request = $_REQUEST;        $datos = SessionGetVar("Datos");        /* print_r($datos); */        $act = AutoCarga::factory("ContratacionProductosClienteHTML", "views", "app", "ContratacionProductosCliente");        $sql = AutoCarga::factory("ContratacionProductosClienteSQL", "classes", "app", "ContratacionProductosCliente");        $request['buscador']['empresa_id'] = $datos['empresa'];        $tipos_ids_terceros = $sql->Tipos_Ids_Terceros();        $Terceros_Clientes = $sql->Terceros_Clientes($request['buscador'], $request['offset']);        $action['volver'] = ModuloGetURL("app", "ContratacionProductosCliente", "controller", "Cotizaciones");        $action['buscador'] = ModuloGetURL("app", "ContratacionProductosCliente", "controller", "Terceros_Cotizacion");        $action['paginador'] = ModuloGetURL('app', 'ContratacionProductosCliente', 'controller', 'Terceros_Cotizacion', array("buscador" => $request['buscador']));        $this->salida = $act->Listado_TercerosCotizaciones($action, $datos, $Terceros_Clientes, $tipos_ids_terceros, $sql->conteo, $sql->pagina);        return true;    }    /**     * Funcion Menu Nuevo Contrato     * Funcion que permite      *   -Crear un Nuevo Contrato     *   -Copiar Un Contrato     * @return boolean     */    function Crear_Cotizacion()    {        $request = $_REQUEST;        /* echo "<pre>";          var_dump($request);          echo "</pre>";          exit(); */        $datos = SessionGetVar("Datos");        $sql = AutoCarga::factory("ContratacionProductosClienteSQL", "classes", "app", "ContratacionProductosCliente");        $act = AutoCarga::factory("ContratacionProductosClienteHTML", "views", "app", "ContratacionProductosCliente");        $Vendedores = $sql->Vendedores();        $action['volver'] = ModuloGetURL("app", "ContratacionProductosCliente", "controller", "Terceros_Cotizacion");        $action['Guardar'] = ModuloGetURL("app", "ContratacionProductosCliente", "controller", "Crear_Cotizacion");        /* $token=$sql->; */        if ($_REQUEST['Nuevo'] == '1')        {            $Vendedores = $sql->Vendedores();            $Tercero = $sql->ConsultarTercero_Contrato($datos['empresa'], $_REQUEST['tercero_id'], $_REQUEST['tipo_id_tercero']);            $this->salida = $act->Crear_Cotizacion($action, $Tercero, $Vendedores);            /* print_r($Tercero); */        }        else        {            $token = $sql->IngresarPedidoTemporal($_REQUEST, $datos['empresa']);            $action['recarga'] = ModuloGetURL("app", "ContratacionProductosCliente", "controller", "Modificar_Cotizacion", array("pedido_cliente_id_tmp" => $token['pedido_cliente_id_tmp'], "tipo_id_tercero" => $_REQUEST['tipo_id_tercero'], "tercero_id" => $_REQUEST['tercero_id']));            $html .= "<script>";            if (!$token)                $html .= " history.go(-1) ";            else                $html .= "window.location=\"" . $action['recarga'] . "\";";            $html .= "</script>";            $this->salida = $html;        }        return true;    }    // bloque1    function Modificar_Cotizacion()    {                $request = $_REQUEST;        $url = "";        $error = "";        IncludeFileModulo("RemotosContratacionProductosCliente", "RemoteXajax", "app", "ContratacionProductosCliente");        $this->SetXajax(array("Buscar_ProductosInventario", "Buscar_ProductosInventario_d", "Guardar_ProductoCotizacion", "guardar_observacion_tmp_cotizacion"), null, "ISO-8859-1");        $this->IncludeJS("CrossBrowser");        $this->IncludeJS("CrossBrowserEvent");        $this->IncludeJS("CrossBrowserDrag");        $datos = SessionGetVar("Datos");        $action['volver'] = ModuloGetURL("app", "ContratacionProductosCliente", "controller", "Cotizaciones");        $sql = AutoCarga::factory("ContratacionProductosClienteSQL", "classes", "app", "ContratacionProductosCliente");        $act = AutoCarga::factory("ContratacionProductosClienteHTML", "views", "app", "ContratacionProductosCliente");        /* EN CASO DE  ELIMINAR ITEMS DE LA COTIZACION */        if ($_REQUEST['Eliminar'] == '1')            $sql->BorrarItem_Cotizacion($_REQUEST['pedido_cliente_id_tmp'], $_REQUEST['codigo_producto']);        /* FIN */                $Vendedores = $sql->Vendedores();        $Tercero = $sql->ConsultarTercero_Contrato(trim($datos['empresa']), trim($_REQUEST['tercero_id']), trim($_REQUEST['tipo_id_tercero']));        $Cotizacion = $sql->Consulta_PedidoTemporal($_REQUEST['pedido_cliente_id_tmp']);                //valida si existe un archivo plano        if(isset($_FILES) && count($_FILES) > 0){                        if($this->esCsvValido($_FILES['archivo_plano']['type'])){                                $csvdatos = array("contrato_cliente_id" => $Tercero['contrato'], "empresa_id" => trim($datos['empresa']), "pedido_cliente_id_tmp" => $_REQUEST['pedido_cliente_id_tmp']);                $resultado = $this->insertarProductosDesdePlano($csvdatos);                if(count($resultado["novalidos"]) > 0){                    $dir_siis = GetVarConfigAplication('DIR_SIIS');                    $path = $dir_siis."tmp/cotizacionesclientelogs.txt";                    $fp = fopen($path,"w+");                    fwrite($fp,"Total de productos con error: ".count($resultado["novalidos"]). PHP_EOL.PHP_EOL);                    foreach($resultado["novalidos"] as $r){                        fwrite($fp,"Codigo Producto ".$r["codigo_producto"]." Cantidad ".$r["cantidad"]. " Error ".$r["mensaje"] . PHP_EOL.PHP_EOL);                    }                     fclose($fp);                     $url = ModuloGetURL("app", "ContratacionProductosCliente", "controller", "MostrarLog");                }             } else {                 $error = "EL ARCHIVO NO ES VALIDO";             }        }        $ProductosCotizacion = $sql->Consulta_PedidoTemporal_d($_REQUEST['pedido_cliente_id_tmp']);        $this->salida = $act->FormaCotizacion($action, $Tercero, $Cotizacion, $ProductosCotizacion, $Vendedores, $datos, $url, $error);        return true;    }        //se encarga de realizar llamar la inserccion de los productos    function insertarProductosDesdePlano($csvdatos){        //Get_dataProd        $sql = AutoCarga::factory("ContratacionProductosClienteSQL", "classes", "app", "ContratacionProductosCliente");        $array = $this->cargar_archivo_plano();        //print_r("datos ".count($array["datos"]));                $validos = array();        $novalidos = array();                foreach ($array["datos"] as $producto){            $csvdatos["codigo_producto"] = trim($producto[0]);            $csvdatos['cantidad'] = trim($producto[1]);                        //realiza busquedad del producto teniendo en cuenta el contrato del tercero            $producto_detallado = $sql->BuscarProducto_InventariosExistenciasPorCodigo($csvdatos);            //echo print_r($producto_detallado)."</br></br>";            if(!empty($producto_detallado) && is_numeric($csvdatos['cantidad'])){                                $resultado = $this->Guardar_ProductoCotizacion($producto_detallado,$csvdatos );                                if(!$resultado["valido"]){                    $producto_detallado["mensaje"] = $resultado["mensaje"];                    $novalidos[] = $producto_detallado;                } else {                    $validos[] = $producto_detallado;                }            } else {                $novalidos[] = array("codigo_producto" =>  $csvdatos["codigo_producto"],                                     "cantidad" => $csvdatos['cantidad'],                                     "mensaje" => "producto no encontrado, ya esta en temporal o la cantidad  es invalida"                                    );            }                    }             //   echo "validos ".print_r($validos)."</br></br>";     //   echo "no validos ".print_r($novalidos)."</br></br>";        return array("validos" => $validos, "novalidos" => $novalidos);    }        //valida el producto antes de guardarlo    function Guardar_ProductoCotizacion($producto, $cvsdatos) {        $sql = AutoCarga::factory("ContratacionProductosClienteSQL", "classes", "app", "ContratacionProductosCliente");        $resultado = array("valido" => true);          //echo print_r($producto);        $precio = explode("@", $producto['precio']);        /*if ($producto['tipo_producto'] == '5' || $producto['tipo_producto'] == '3') {            $resultado["mensaje"]  = "El producto es controlado o de Nevera, PRODUCTO {$producto['codigo_producto']} ";            $resultado["valido"] = false;        }*/                if($producto["sw_requiereautorizacion_despachospedidos"] == '1'){            $resultado["mensaje"]  = "EL PRODUCTO REQUIERE AUTORIZACION PARA SER DESPACHADO, PRODUCTO {$producto['codigo_producto']} ";            $resultado["valido"] = false;        }                if($producto['estado'] != '1'){            $resultado["mensaje"]  = "EL PRODUCTO NO SE ENCUENTRA ACTIVO, PRODUCTO {$producto['codigo_producto']} ";            $resultado["valido"] = false;        }                if ($precio[0] > $producto['costo_ultima_compra']){            $query .=$sql->Sql_IngresarProductoCotizacion($cvsdatos['pedido_cliente_id_tmp'], $producto['codigo_producto'], $producto['porc_iva'], $cvsdatos["cantidad"], $precio[0]);        } else {             $resultado["mensaje"]  = "EL PRECIO NO DEBE SER MENOR AL DE COMPRA: REVISAR PRECIO VENTA,PRODUCTO {$producto['codigo_producto']}";            $resultado["valido"] = false;        }               if($query != "" && $resultado['valido']) {         $token = $sql->IngresarPedidoDetalleTemporal($query);                  if(!$token){            $resultado["mensaje"]  = "ERROR INGRESANDO EL PRODUCTO {$producto['codigo_producto']}";            $resultado["valido"] = false;         }                 }        return $resultado;    }        function cargar_archivo_plano() {        $mensaje_error = "";               if ($_FILES['archivo_plano']['error'] != 0) {            switch ($_FILES['archivo_plano']['error']) {                case UPLOAD_ERR_INI_SIZE:                    $mensaje_error = "EL ARCHIVO QUE SE ESTA SUBIENDO EXCEDE EL TAMA�O PERMITIDO";                    break;                case UPLOAD_ERR_FORM_SIZE:                    $mensaje_error = "EL ARCHIVO QUE SE ESTA SUBIENDO EXCEDE EL TAMA�O PERMITIDO EN LA FORMA";                    break;                case UPLOAD_ERR_PARTIAL:                    $mensaje_error = "EL ARCHIVO SOLO FUE SUBIDO PARCIALMENTE";                    break;                case UPLOAD_ERR_NO_FILE:                    $mensaje_error = "EL ARCHIVO NO FUE SUBIDO";                    break;                case UPLOAD_ERR_NO_TMP_DIR:                    $mensaje_error = "NO HAY DIRECTORIO TEMPORAL PARA SUBIR EL ARCHIVO";                    break;                case UPLOAD_ERR_CANT_WRITE:                    $mensaje_error = "HA OCURRIDO UN ERROR AL MOMENTO DE COPIAR EL ARCHIVO A DISCO";                    break;                case UPLOAD_ERR_EXTENSION:                    $mensaje_error = "HA OCURRIDO UN ERROR CON LA EXTENSION DEL ARCHIVO";                    break;                default:                    $mensaje_error = "HA OCURRIDO UN ERROR DESCONOCIDO MIENTRAS SE REALIZABA EL PROCESO";                    break;            }            return false;        }        if (is_uploaded_file($_FILES['archivo_plano']['tmp_name'])) {            //$mensaje_error .= ' - Archivo Cargado';            $datos_archivo = array();            $archivo = fopen($_FILES['archivo_plano']['tmp_name'], "r");            while (!feof($archivo)) {                $datos = explode(";", fgets($archivo));                array_push($datos_archivo, $datos);            }                    }        return array('mensaje_error' => $mensaje_error, 'datos' => $datos_archivo);    }    function Crear_PedidosCliente()    {        $request = $_REQUEST;        $sql = AutoCarga::factory("ContratacionProductosClienteSQL", "classes", "app", "ContratacionProductosCliente");        $Cotizacion = $sql->Consulta_PedidoTemporal($_REQUEST['pedido_cliente_id_tmp']);        $ProductosCotizacion = $sql->Consulta_PedidoTemporal_d($_REQUEST['pedido_cliente_id_tmp']);        if (!empty($ProductosCotizacion))        {            $pedido_cliente_id = $sql->Sql_IngresarPedido($Cotizacion);            $token = $sql->Sql_IngresarPedido_d($pedido_cliente_id['pedido_cliente_id'], $ProductosCotizacion);        }        $request['buscador']['pedido_cliente_id'] = $pedido_cliente_id['pedido_cliente_id'];        $action['recarga'] = ModuloGetURL("app", "ContratacionProductosCliente", "controller", "Pedidos", array("buscador" => $request['buscador']));        $html .= "<script>";        if (!$token)        {            $html .= " history.go(-1) ";        }        else        {            $sql->Inactivar_Cotizacion($request['pedido_cliente_id_tmp']);            $html .= "window.location=\"" . $action['recarga'] . "\";";        }        $html .= "</script>";        $this->salida = $html;        return true;    }    /**     * Funcion Menu Nuevo Contrato     * Funcion que permite      *   -Crear un Nuevo Contrato     *   -Copiar Un Contrato     * @return boolean     */    function Pedidos()    {        $request = $_REQUEST;        $datos = SessionGetVar("Datos");        /* print_r($datos); */        IncludeFileModulo("RemotosContratacionProductosCliente", "RemoteXajax", "app", "ContratacionProductosCliente");        $this->SetXajax(array("AnularPedido", "Guardar_AnularPedido"), null, "ISO-8859-1");        $this->IncludeJS("CrossBrowser");        $this->IncludeJS("CrossBrowserEvent");        $this->IncludeJS("CrossBrowserDrag");        $action['volver'] = ModuloGetURL("app", "ContratacionProductosCliente", "controller", "MenuPrincipal");        $action['paginador'] = ModuloGetURL('app', 'ContratacionProductosCliente', 'controller', 'Pedidos', array("buscador" => $request['buscador']));        $action['buscador'] = ModuloGetURL("app", "ContratacionProductosCliente", "controller", "Pedidos");        $act = AutoCarga::factory("ContratacionProductosClienteHTML", "views", "app", "ContratacionProductosCliente");        $sql = AutoCarga::factory("ContratacionProductosClienteSQL", "classes", "app", "ContratacionProductosCliente");        if ($_REQUEST['INACTIVAR'] == '1')            $sql->CambiarEstado_Pedido($request['pedido_cliente_id'], 'PEDIDO INACTIVADO', '0');        if ($_REQUEST['ACTIVAR'] == '1')            $sql->CambiarEstado_Pedido($request['pedido_cliente_id'], 'PEDIDO ACTIVADO', '1');        // if($request['buscador'])        // {        $Cotizaciones = $sql->Listado_Pedidos($datos['empresa'], $request['buscador'], $request['offset']);        //}        $this->salida = $act->Listado_Pedidos($action, $datos, $Cotizaciones, $sql->conteo, $sql->pagina);        return true;    }    /*     * **********************************************************     * Funcion que permite consultar pedidos de clientes     * @return boolean     * ********************************************************** */    function ConsulPedidos()    {        $request = $_REQUEST;        $datos = SessionGetVar("Datos");        /* print_r($datos); */        IncludeFileModulo("RemotosContratacionProductosCliente", "RemoteXajax", "app", "ContratacionProductosCliente");        $this->SetXajax(array("AnularPedido", "Guardar_AnularPedido"), null, "ISO-8859-1");        $this->IncludeJS("CrossBrowser");        $this->IncludeJS("CrossBrowserEvent");        $this->IncludeJS("CrossBrowserDrag");        $action['volver'] = ModuloGetURL("app", "ContratacionProductosCliente", "controller", "MenuPrincipal");        $action['paginador'] = ModuloGetURL('app', 'ContratacionProductosCliente', 'controller', 'ConsulPedidos', array("buscador" => $request['buscador']));        $action['buscador'] = ModuloGetURL("app", "ContratacionProductosCliente", "controller", "ConsulPedidos");        $act = AutoCarga::factory("ContratacionProductosClienteHTML", "views", "app", "ContratacionProductosCliente");        $sql = AutoCarga::factory("ContratacionProductosClienteSQL", "classes", "app", "ContratacionProductosCliente");        if ($_REQUEST['INACTIVAR'] == '1')            $sql->CambiarEstado_Pedido($request['pedido_cliente_id'], 'PEDIDO INACTIVO', '0');        if ($_REQUEST['ACTIVAR'] == '1')            $sql->CambiarEstado_Pedido($request['pedido_cliente_id'], 'PEDIDO ACTIVADO', '1');        $pedidoCli = '';        if ($request['buscador'])        {            $pedidoCli = $request['buscador']['pedido_cliente_id'];            $Cotizaciones = $sql->Listado_Pedidos2($datos['empresa'], $request['buscador'], $request['offset']);        }        $this->salida = $act->Listado_ConsulPedidos($action, $pedidoCli, $datos, $Cotizaciones, $sql->conteo, $sql->pagina);        return true;    }    function Modificar_Pedido()    {        $request = $_REQUEST;        IncludeFileModulo("RemotosContratacionProductosCliente", "RemoteXajax", "app", "ContratacionProductosCliente");        $this->SetXajax(array("Buscar_Productos", "Buscar_Productos_d", "Guardar_ProductoPedido"), null, "ISO-8859-1");        $this->IncludeJS("CrossBrowser");        $this->IncludeJS("CrossBrowserEvent");        $this->IncludeJS("CrossBrowserDrag");        $datos = SessionGetVar("Datos");        /* print_r($_REQUEST); */        $action['volver'] = ModuloGetURL("app", "ContratacionProductosCliente", "controller", "Pedidos");        $action['modificar'] = ModuloGetURL("app", "ContratacionProductosCliente", "controller", "Modificar_Pedido");        $sql = AutoCarga::factory("ContratacionProductosClienteSQL", "classes", "app", "ContratacionProductosCliente");        $act = AutoCarga::factory("ContratacionProductosClienteHTML", "views", "app", "ContratacionProductosCliente");        if ($_REQUEST['OBSERVACION_'] == '1')        {            $sql->AsignarObservacion($_REQUEST['pedido_cliente_id'], $_REQUEST['observacion']);        }        if ($_REQUEST['MODIFICAR'] == '1')        {            for ($i = 0; $i < $_REQUEST['cantidad_registros']; $i++)            {                if ($_REQUEST['check_' . $i] != "")                    $sql->ModificarPedido($_REQUEST['pedido_cliente_id'], $_REQUEST['check_' . $i], $_REQUEST['cantidad_nueva' . $i]);            }        }        /* EN CASO DE  ELIMINAR ITEMS DE LA COTIZACION */        if ($_REQUEST['Eliminar'] == '1')            $sql->BorrarItem_Pedido($_REQUEST['pedido_cliente_id'], $_REQUEST['codigo_producto']);        /* FIN */        /* $Tercero=$sql->ConsultarTercero_Contrato($datos['empresa'],$_REQUEST['tercero_id'],$_REQUEST['tipo_id_tercero']); */        $Pedido = $sql->Listado_Pedidos($datos['empresa'], $_REQUEST, '1');        $ProductosPedido = $sql->Consulta_Pedido_d($_REQUEST['pedido_cliente_id']);        $Tercero = $sql->ConsultarTercero_Contrato($datos['empresa'], $Pedido[0]['tercero_id'], $Pedido[0]['tipo_id_tercero']);        $this->salida = $act->FormaPedidos($action, $Pedido[0], $ProductosPedido, $datos, $Tercero);        return true;    }    /**     * Funcion Menu Nuevo Contrato     * Funcion que permite       /*   -Crear un Nuevo Contrato      /*   -Copiar Un Contrato     * @return boolean     */    function CrearVendedores()    {        $request = $_REQUEST;        $datos = SessionGetVar("Datos");        /* print_r($datos); */        $action['Crear_Vendedor'] = ModuloGetURL("app", "ContratacionProductosCliente", "controller", "FormularioVendedor", array("tipo_id_vendedor" => "--", "vendedor_id" => "--"));        $action['volver'] = ModuloGetURL("app", "ContratacionProductosCliente", "controller", "MenuPrincipal");        $action['paginador'] = ModuloGetURL('app', 'ContratacionProductosCliente', 'controller', 'CrearVendedores', array("buscador" => $request['buscador']));        $act = AutoCarga::factory("ContratacionProductosClienteHTML", "views", "app", "ContratacionProductosCliente");        $sql = AutoCarga::factory("ContratacionProductosClienteSQL", "classes", "app", "ContratacionProductosCliente");        if ($_REQUEST['cambiar_estado'] != '')            $sql->Inactivar_Vendedor($_REQUEST);        $Vendedores = $sql->Listado_Vendedores($datos['empresa'], $request['buscador'], $request['offset']);        $tipos_ids_terceros = $sql->Tipos_Ids_Terceros();        $this->salida = $act->Listado_Vendedores($action, $datos, $Vendedores, $tipos_ids_terceros, $sql->conteo, $sql->pagina);        return true;    }    /**     * Funcion Menu Nuevo Contrato     * Funcion que permite       /*   -Crear un Nuevo Contrato      /*   -Copiar Un Contrato     * @return boolean     */    function FormularioVendedor()    {        $request = $_REQUEST;        $datos = SessionGetVar("Datos");        /* print_r($datos); */        $action['GuardarVendedor'] = ModuloGetURL("app", "ContratacionProductosCliente", "controller", "FormularioVendedor");        $action['volver'] = ModuloGetURL("app", "ContratacionProductosCliente", "controller", "CrearVendedores");        $act = AutoCarga::factory("ContratacionProductosClienteHTML", "views", "app", "ContratacionProductosCliente");        $sql = AutoCarga::factory("ContratacionProductosClienteSQL", "classes", "app", "ContratacionProductosCliente");        $html .= "	<script>";        if ($_REQUEST['consulta'] == '1')        {            $token = $sql->Ingresar_Vendedor($_REQUEST);            if (!$token)            {                $html .= " 		alert('ERROR AL GUARDAR, VERIFIQUE SI LOS CAMPOS HAN SIDO DILIGENCIADOS DE MANERA CORRECTA'); ";                $html .= " 		history.go(-1) ";            }            else            {                $html .= " 		alert('DATOS GUARDADOS CORRECTAMENTE'); ";            }        }        else        if ($_REQUEST['consulta'] == '0')        {            $token = $sql->Modificar_Vendedor($_REQUEST);            if (!$token)            {                $html .= " 		alert('ERROR AL MODIFICAR, VERIFIQUE SI LOS CAMPOS HAN SIDO DILIGENCIADOS DE MANERA CORRECTA'); ";            }            else            {                $html .= " 		alert('DATOS GUARDADOS CORRECTAMENTE'); ";            }        }        $html .= "	</script>";        $usuarios = $sql->Listado_Usuarios();        $tipos_ids_terceros = $sql->Tipos_Ids_Terceros();        $request['buscador']['tipo_id_vendedor'] = $_REQUEST['tipo_id_vendedor'];        $request['buscador']['vendedor_id'] = $_REQUEST['vendedor_id'];        $Vendedor = $sql->Listado_Vendedores($datos['empresa'], $request['buscador'], $request['offset']);        $this->salida = $act->Formulario_Vendedores($action, $datos, $Vendedores, $tipos_ids_terceros, $usuarios, $Vendedor);        $this->salida .= $html;        return true;    }    /**     * Funcion Menu Nuevo Contrato     * Funcion que permite       /*   -Crear un Nuevo Contrato      /*   -Copiar Un Contrato     * @return boolean     */    function VigenciaCotizacion()    {        $request = $_REQUEST;        $datos = SessionGetVar("Datos");        $action['GuardarDatos'] = ModuloGetURL("app", "ContratacionProductosCliente", "controller", "VigenciaCotizacion");        $action['volver'] = ModuloGetURL("app", "ContratacionProductosCliente", "controller", "MenuPrincipal");        $act = AutoCarga::factory("ContratacionProductosClienteHTML", "views", "app", "ContratacionProductosCliente");        $sql = AutoCarga::factory("ContratacionProductosClienteSQL", "classes", "app", "ContratacionProductosCliente");        $html .= "	<script>";        if ($_REQUEST['consulta'] == '1')        {            $token = $sql->Ingresar_VigenciaCotizacion($datos['empresa'], $_REQUEST);            if (!$token)            {                $html .= " 		alert('ERROR AL GUARDAR, VERIFIQUE SI LOS CAMPOS HAN SIDO DILIGENCIADOS DE MANERA CORRECTA'); ";                $html .= " 		history.go(-1) ";            }            else            {                $html .= " 		alert('DATOS GUARDADOS CORRECTAMENTE'); ";            }        }        else        if ($_REQUEST['consulta'] == '0')        {            $token = $sql->Modificar_VigenciaCotizacion($datos['empresa'], $_REQUEST);            if (!$token)            {                $html .= " 		alert('ERROR AL MODIFICAR, VERIFIQUE SI LOS CAMPOS HAN SIDO DILIGENCIADOS DE MANERA CORRECTA'); ";            }            else            {                $html .= " 		alert('DATOS GUARDADOS CORRECTAMENTE'); ";            }        }        $html .= "	</script>";        $Vigencia_Parametrizada = $sql->Vigencia_Cotizacion($datos['empresa']);        $this->salida = $act->Vigencia_Cotizacion($action, $datos, $Vigencia_Parametrizada);        $this->salida .= $html;        return true;    }    /*     * *************************************************************     * Funcion de impresion general de pedidos clientes    *     * @return boolean     * ************************************************************* */    function MostrarPedidosGral()    {        $request = $_REQUEST;        $pedidoid = $_REQUEST['pedido'];        $mdl = AutoCarga::factory("ContratacionProductosClienteHTML", "views", "app", "ContratacionProductosCliente");        $this->salida .= $mdl->FormaPedGral($pedidoid);        return true;    }            function MostrarLog()    {        $filename = GetVarConfigAplication('DIR_SIIS')."tmp/cotizacionesclientelogs.txt";        header('Content-Type: application/octet-stream');        header('Content-Disposition: attachment; filename='.basename($filename));        header('Expires: 0');        header('Cache-Control: must-revalidate');        header('Pragma: public');        header('Content-Length: ' . filesize($filename));        readfile($filename);        exit();    }        function esCsvValido($type){            // echo $type;            $mimes = array('application/vnd.ms-excel','text/plain','text/csv','text/tsv', 'application/download');            if(in_array($type,$mimes)){              return true;            }             return false;    }	    //se encarga de realizar la inserccion de los productos    function insertarProductosDesdePlano2($csvdatos){                $sql = AutoCarga::factory("ContratacionProductosClienteSQL", "classes", "app", "ContratacionProductosCliente");        $array = $this->cargar_archivo_plano();                $validos = array();        $novalidos = array();                foreach ($array["datos"] as $producto){            $csvdatos["codigo_producto"] = trim($producto[0]);            $csvdatos['precio_pactado'] = trim($producto[1]);           		   //realiza busqueda del producto             $producto_detallado = $sql->BuscarProducto_Contrato($csvdatos['contrato_cliente_id'], $csvdatos["codigo_producto"]);            if(!empty($csvdatos["codigo_producto"]) && is_numeric($csvdatos['precio_pactado']) && $csvdatos['precio_pactado'] > 0){				if(!empty($producto_detallado)){										$resultado = $sql->UpdateProducto_Contrato($csvdatos['contrato_cliente_id'], $csvdatos["codigo_producto"], $csvdatos['precio_pactado']);									}else{										$resultado = $sql->InsertarProducto_Contrato($csvdatos['contrato_cliente_id'], $csvdatos["codigo_producto"], $csvdatos['precio_pactado']);					                }				                if(!$resultado){                    $novalidos[] = array("codigo_producto" =>  $csvdatos["codigo_producto"],                                     "precio" => $csvdatos['precio_pactado'],                                     "mensaje" => "producto no encontrado o el precio  es invalido; "                                    );                } else {                    $validos[] = $csvdatos["codigo_producto"];                }            } else if(empty($csvdatos["codigo_producto"]) && empty($csvdatos["precio_pactado"])){									} else {                $novalidos[] = array("codigo_producto" =>  $csvdatos["codigo_producto"],                                     "precio" => $csvdatos['precio_pactado'],                                     "mensaje" => "producto no encontrado o el precio  es invalido; "                                    );            }                    }                return array("validos" => $validos, "novalidos" => $novalidos);    }		function LogProductos()    {        $filename = GetVarConfigAplication('DIR_SIIS')."tmp/productos_contratos/productosclientelogs.txt";        header('Content-Type: application/octet-stream');        header('Content-Disposition: attachment; filename='.basename($filename));        header('Expires: 0');        header('Cache-Control: must-revalidate');        header('Pragma: public');        header('Content-Length: ' . filesize($filename));        readfile($filename);        exit();    }}?>